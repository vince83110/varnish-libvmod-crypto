#-
# Copyright 2018 UPLEX Nils Goroll Systemoptimierung
# All rights reserved
#
# Author: Nils Goroll <nils.goroll@uplex.de>
#
# See LICENSE
#

$Module crypto 3 "Public Key hash verification for Varnish"
$Prefix vmod

DESCRIPTION
===========

This vmod provides VCL access to cryptographic functions from the
_crypt_ library.

Example
    ::

	import crypto;

	sub vcl_init {
	    new v = crypto.verifier(sha256, {"
	-----BEGIN PUBLIC KEY-----
	...
	-----END PUBLIC KEY-----
	"});
	}
	sub vcl_deliver {
	    if (! v.update("data")) {
		return (synth(500, "vmod_crypto error"));
	    }
	    if (! v.valid(blob.encode(BASE64URLNOPAD, "base64"))) {
		return (synth(400, "invalid signature"));
	    }
	}

$Object key(PRIV_TASK)

Create a generic key object. The algorithm gets defined by the method
called upon it.

Any methods on `crypto.key()`_ may only be used in ``sub vcl_init {}``.

$Method BLOB .use()

Wrap the key in a blob to be passed to `crypto.verifier()`_

$Method VOID .pem_pubkey(STRING)

Create a key from the PEM-encoded public key.

The cryptographic method to be used and the key length are
automatically determined from _pem_. Typically supported methods
comprise RSA and DSA.

Any error is fatal to vcl initialization.

$Method VOID .pem_privkey(STRING, STRING password=0)

Create a key from the PEM-encoded private key, optionally decrypting
it using `password`.

The cryptographic method to be used and the key length are
automatically determined from _pem_. Typically supported methods
comprise RSA and DSA.

Any error is fatal to vcl initialization.

$Method VOID .rsa(BLOB n, BLOB e, [BLOB d])

Create an RSA key from the parameters n, e, and optionally d.

Any error is fatal to vcl initialization.

$Object verifier(ENUM {md_null, md4, md5, sha1, sha224,
	sha256, sha384, sha512, ripemd160, rmd160, whirlpool} digest,
	[STRING pem], [BLOB key])

Create an object to verify signatures created using _digest_ and
_key_.

The _key_ argument should be a call to `xkey.use()`_ on the respective
`crypto.key()`_ object.

Alternatively to _key_, the _pem_ argument may be used to pass a
PEM-encoded public key specification. Use of the _pem_ argument is
deprecated.

Either the _key_ or the _pem_ argument must be given.

$Method BOOL .update(STRANDS)

Add strings to the data to be verfied with the verifier object.

$Method BOOL .update_blob(BLOB)

Add a blob to the data to be verified with the verifier object.

$Method BOOL .reset()

Reset the verfication state as if previous calls to the update methods
had not happened.

$Method BOOL .valid(BLOB signature)

Check if _signature_ is a valid signature for the _verifier_ object
given the previous updates.

Note that after calling .valid(), .update can be called again to add
additional data, which can then be validated against a (different)
signature using another call to .valid().

$Object signer(ENUM {md_null, md4, md5, sha1, sha224,
	sha256, sha384, sha512, ripemd160, rmd160, whirlpool} digest,
	[STRING pem], [BLOB key])

Create an object to create signatures using _digest_ and _key_.

The _key_ argument should be a call to `xkey.use()`_ on the respective
`crypto.key()`_ private key object.

Alternatively to _key_, the _pem_ argument may be used to pass a
PEM-encoded private key specification. Password protection is not
supported with a _pem_ argument. Use of the _pem_ argument is
deprecated.

Either the _key_ or the _pem_ argument must be given.

$Method BOOL .update(STRANDS)

Add strings to the data to be signed.

$Method BOOL .update_blob(BLOB)

Add a blob to the data to be signed.

$Method BOOL .reset()

Reset the signer state as if previous calls to the update methods had
not happened.

$Method BLOB .final()

Return the signature for data added using `xsigner.update()` and
`xsigner.update_blob()`.

Note that after calling `xsigner.final()`,
`xsigner.update()`/`xsigner.update_blob()` can be called again to add
additional data, and more signatures can be generated with
`xsigner.final()`.

SEE ALSO
========vcl\(7),varnishd\(1)
